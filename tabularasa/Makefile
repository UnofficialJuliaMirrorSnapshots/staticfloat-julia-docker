include ../common.mk

# Only include HFS entries that exist within this directory as well
HFS:=$(filter $(subst .Dockerfile,,$(wildcard *.Dockerfile)),$(HFS))
BUILD_HFS=$(call arch_filt,$(BUILD_ARCHS),$(HFS))

# Build "dockerfiles" target that assembles all Dockerfiles
$(foreach f,$(HFS),$(eval $(call add_dep,dockerfiles,build/$(f)/Dockerfile)))

# Build "buildall" target that attempts to build every Dockerfile in the room,
# but only from the ones that our build architecture can manage.
$(foreach f,$(BUILD_HFS),$(eval $(call add_dep,buildall,build-$(f))))

# Build "pushall" target that pushes up the result of "buildall"
$(foreach f,$(BUILD_HFS),$(eval $(call add_dep,pushall,push-$(f))))

# This is where we put our derived Dockerfiles
lib:
	ln -sf ../workerbase/lib lib


define build_dockerfile
# Running just `make build-ubuntu16_04-x86` will build that image
build-$(1): build/$(1)/Dockerfile
	$(DOCKER_BUILD) --pull -t $(call tabularasa_tag_name,$(1)) "build/$(1)"

shell-$(1):
	docker run -ti $(call tabularasa_tag_name,$(1))

# Running `make push-ubuntu16_04-x86` will upload that image to
push-$(1):
	docker push $(call tabularasa_tag_name,$(1))

# This is how we build the actual Dockerfile
build/$(1)/Dockerfile: $(1).Dockerfile lib Makefile
	@if [ ! -f "$(1).Dockerfile" ]; then \
		echo "Target \"$(1)\" is invalid, recheck your spelling good sir."; \
		exit 1; \
	fi
	@mkdir -p "build/$(1)"
	@rm -f "build/$(1)/Dockerfile.tmp"

	@# Build the altered Dockerfile
	@echo "$(1).Dockerfile"
	@../dockerchain "./$(1).Dockerfile" > "build/$(1)/Dockerfile.tmp"
	@echo "## This file was autogenerated" > "build/$(1)/Dockerfile"
	@echo "# Do not edit directly; edit the .Dockerfile files" >> "build/$(1)/Dockerfile"
	@echo "#" >> "build/$(1)/Dockerfile"
	@echo "# To build this docker image via \`make\`, run \`make build-$(1)\` in the \`tabularasa\` directory" >> "build/$(1)/Dockerfile"
	@echo "# To build this docker image manually, run \`docker build --pull -t $(call tabularasa_tag_name,$(1)) .\`" >> "build/$(1)/Dockerfile"
	@echo >> "build/$(1)/Dockerfile"
	@cat "build/$(1)/Dockerfile.tmp" >> "build/$(1)/Dockerfile"
	@rm -f "build/$(1)/Dockerfile.tmp"
	@cp lib/*.sh "build/$(1)/"
endef

$(foreach f,$(HFS),$(eval $(call build_dockerfile,$(f))))


clean:
	rm -rf build lib
